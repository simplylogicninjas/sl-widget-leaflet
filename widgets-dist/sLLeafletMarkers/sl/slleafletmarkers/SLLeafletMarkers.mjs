import React, { useContext, useRef, useEffect, createElement } from 'react';

var ActionType;
(function (ActionType) {
    ActionType[ActionType["SetMapReady"] = 0] = "SetMapReady";
    ActionType[ActionType["SetMapName"] = 1] = "SetMapName";
    ActionType[ActionType["SetMarkers"] = 2] = "SetMarkers";
    ActionType[ActionType["SetGeoJSON"] = 3] = "SetGeoJSON";
    ActionType[ActionType["SetGeoJSONAction"] = 4] = "SetGeoJSONAction";
    ActionType[ActionType["SetGeofence"] = 5] = "SetGeofence";
    ActionType[ActionType["SetGeofenceAction"] = 6] = "SetGeofenceAction";
    ActionType[ActionType["SetGeofenceOutAction"] = 7] = "SetGeofenceOutAction";
    ActionType[ActionType["SetGeofencePositionAction"] = 8] = "SetGeofencePositionAction";
    ActionType[ActionType["SetGeofenceOptions"] = 9] = "SetGeofenceOptions";
    ActionType[ActionType["SetMarkerAction"] = 10] = "SetMarkerAction";
    ActionType[ActionType["SetMarkerDragAction"] = 11] = "SetMarkerDragAction";
})(ActionType || (ActionType = {}));
function updateMarkers(markers) {
    return {
        type: ActionType.SetMarkers,
        payload: [...markers]
    };
}
function updateMarkerAction(data) {
    return {
        type: ActionType.SetMarkerAction,
        payload: data
    };
}
function updateMarkerDragAction(data) {
    return {
        type: ActionType.SetMarkerDragAction,
        payload: data
    };
}

const isDifferentData = (currentData, newData) => {
    return JSON.stringify(currentData) !== JSON.stringify(newData);
};
function SLLeafletMarkers(props) {
    const { state, dispatch } = useContext(mx.slmap.context);
    const dataRef = useRef([]);
    const initMarkers = (items) => {
        const data = items
            .map(it => {
            var _a, _b;
            if (props.id.get(it).value && props.latitude.get(it).value && props.longitude.get(it).value) {
                const content = (_a = props.content) === null || _a === void 0 ? void 0 : _a.get(it);
                const popupContent = (_b = props.popupContent) === null || _b === void 0 ? void 0 : _b.get(it);
                const id = props.id.get(it).value.toString();
                const lat = props.latitude.get(it).value;
                const long = props.longitude.get(it).value;
                const draggable = props.draggable.get(it).value;
                return {
                    content,
                    popupContent,
                    id,
                    draggable: !!draggable,
                    position: [parseFloat(lat), parseFloat(long)]
                };
            }
            else {
                return undefined;
            }
        })
            .filter(it => !!it);
        if (isDifferentData(data, dataRef.current)) {
            dataRef.current = data;
            dispatch(updateMarkers([...data]));
        }
    };
    const onMarkerClick = (id) => {
        if (props.onMarkerClickAction && props.onMarkerID) {
            props.onMarkerID.setValue(id);
            props.onMarkerClickAction.execute();
        }
    };
    const onMarkerDrag = (lat, long, id) => {
        if (props.onMarkerDragAction &&
            props.onMarkerMoveID &&
            props.onMarkerMoveLatitude &&
            props.onMarkerMoveLongitude) {
            props.onMarkerMoveID.setValue(id);
            props.onMarkerMoveLatitude.setValue(lat);
            props.onMarkerMoveLongitude.setValue(long);
            props.onMarkerDragAction.execute();
        }
    };
    useEffect(() => {
        if (state.mapReady && props.data.items) {
            initMarkers(props.data.items);
        }
    }, [props.data.items, state.mapReady]);
    useEffect(() => {
        if (props.onMarkerClickAction && props.onMarkerID) {
            dispatch(updateMarkerAction(onMarkerClick));
        }
        if (props.onMarkerDragAction &&
            props.onMarkerMoveID &&
            props.onMarkerMoveLatitude &&
            props.onMarkerMoveLongitude) {
            dispatch(updateMarkerDragAction(onMarkerDrag));
        }
    }, [
        props.onMarkerClickAction,
        props.onMarkerID,
        props.onMarkerDragAction,
        props.onMarkerMoveID,
        props.onMarkerMoveLatitude,
        props.onMarkerMoveLongitude
    ]);
    return createElement(React.Fragment, null);
}

export { SLLeafletMarkers };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

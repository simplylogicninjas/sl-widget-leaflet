define(['exports', 'react'], (function (exports, React) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

    var ActionType;
    (function (ActionType) {
        ActionType[ActionType["SetMapReady"] = 0] = "SetMapReady";
        ActionType[ActionType["SetMapName"] = 1] = "SetMapName";
        ActionType[ActionType["SetMarkers"] = 2] = "SetMarkers";
        ActionType[ActionType["SetGeoJSON"] = 3] = "SetGeoJSON";
        ActionType[ActionType["SetGeoJSONAction"] = 4] = "SetGeoJSONAction";
        ActionType[ActionType["SetGeofence"] = 5] = "SetGeofence";
        ActionType[ActionType["SetGeofenceAction"] = 6] = "SetGeofenceAction";
        ActionType[ActionType["SetGeofenceOutAction"] = 7] = "SetGeofenceOutAction";
        ActionType[ActionType["SetGeofencePositionAction"] = 8] = "SetGeofencePositionAction";
        ActionType[ActionType["SetGeofenceOptions"] = 9] = "SetGeofenceOptions";
        ActionType[ActionType["SetMarkerAction"] = 10] = "SetMarkerAction";
        ActionType[ActionType["SetMarkerDragAction"] = 11] = "SetMarkerDragAction";
    })(ActionType || (ActionType = {}));
    function updateGeoJSON(data) {
        return {
            type: ActionType.SetGeoJSON,
            payload: [...data]
        };
    }
    function updateGeoJSONAction(data) {
        return {
            type: ActionType.SetGeoJSONAction,
            payload: data
        };
    }

    const isDifferentData = (currentData, newData) => {
        return JSON.stringify(currentData) !== JSON.stringify(newData);
    };
    function SLLeafletGeoJSON(props) {
        const { state, dispatch } = React.useContext(mx.slmap.context);
        const dataRef = React.useRef([]);
        const loadGeoJSON = (items) => {
            dataRef.current = [...items];
            const data = items
                .map(item => {
                const geoJSON = props.geoJSON.get(item);
                if (geoJSON.value) {
                    return JSON.parse(geoJSON.value);
                }
                else {
                    return null;
                }
            })
                .filter(it => !!it);
            dispatch(updateGeoJSON(data));
        };
        const onFeatureClick = (id) => {
            if (props.onFeatureClickAction && props.onFeatureId) {
                props.onFeatureId.setValue(id);
                props.onFeatureClickAction.execute();
            }
        };
        React.useEffect(() => {
            if (state.mapReady && props.data.items && isDifferentData(dataRef.current, props.data.items)) {
                loadGeoJSON(props.data.items);
            }
        }, [props.data.items]);
        React.useEffect(() => {
            if (props.onFeatureClickAction && props.onFeatureId) {
                dispatch(updateGeoJSONAction(onFeatureClick));
            }
        }, [props.onFeatureClickAction, props.onFeatureId]);
        return React.createElement(React__default["default"].Fragment, null);
    }

    exports.SLLeafletGeoJSON = SLLeafletGeoJSON;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

define(['exports', 'react', 'big.js'], (function (exports, React, Big) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
    var Big__default = /*#__PURE__*/_interopDefaultLegacy(Big);

    var ActionType;
    (function (ActionType) {
        ActionType[ActionType["SetMapReady"] = 0] = "SetMapReady";
        ActionType[ActionType["SetMapName"] = 1] = "SetMapName";
        ActionType[ActionType["SetMarkers"] = 2] = "SetMarkers";
        ActionType[ActionType["SetGeoJSON"] = 3] = "SetGeoJSON";
        ActionType[ActionType["SetGeoJSONAction"] = 4] = "SetGeoJSONAction";
        ActionType[ActionType["SetGeofence"] = 5] = "SetGeofence";
        ActionType[ActionType["SetGeofenceAction"] = 6] = "SetGeofenceAction";
        ActionType[ActionType["SetGeofenceOutAction"] = 7] = "SetGeofenceOutAction";
        ActionType[ActionType["SetGeofencePositionAction"] = 8] = "SetGeofencePositionAction";
        ActionType[ActionType["SetGeofenceOptions"] = 9] = "SetGeofenceOptions";
        ActionType[ActionType["SetMarkerAction"] = 10] = "SetMarkerAction";
        ActionType[ActionType["SetMarkerDragAction"] = 11] = "SetMarkerDragAction";
    })(ActionType || (ActionType = {}));
    function updateGeofence(data) {
        return {
            type: ActionType.SetGeofence,
            payload: [...data]
        };
    }
    function updateGeofenceAction(data) {
        return {
            type: ActionType.SetGeofenceAction,
            payload: data
        };
    }
    function updateGeofenceOutAction(data) {
        return {
            type: ActionType.SetGeofenceOutAction,
            payload: data
        };
    }
    function updateGeofencePositionAction(data) {
        return {
            type: ActionType.SetGeofencePositionAction,
            payload: data
        };
    }
    function updateGeofenceOptions(data) {
        return {
            type: ActionType.SetGeofenceOptions,
            payload: data
        };
    }

    const canSetAttributeValue = (attributeValue) => {
        return attributeValue && attributeValue.status === "available" /* Available */;
    };
    const isDifferentData = (currentData, newData) => {
        return JSON.stringify(currentData) !== JSON.stringify(newData);
    };
    function SLLeafletGeofence(props) {
        const { state, dispatch } = React.useContext(mx.slmap.context);
        const dataRef = React.useRef([]);
        const actionOut = React.useRef();
        const actionOutID = React.useRef();
        const actionIn = React.useRef();
        const actionInID = React.useRef();
        const actionInDistance = React.useRef();
        const getDefaultRadius = () => {
            var _a, _b;
            return (_b = (_a = props.defaultRadius.value) === null || _a === void 0 ? void 0 : _a.toNumber()) !== null && _b !== void 0 ? _b : 30;
        };
        const loadGeofence = (items) => {
            const data = items
                .map(item => {
                var _a, _b, _c, _d;
                if (props.id.get(item).value && props.latitude.get(item).value && props.longitude.get(item).value) {
                    return {
                        id: props.id.get(item).value.toString(),
                        position: [
                            parseFloat(props.latitude.get(item).value),
                            parseFloat(props.longitude.get(item).value)
                        ],
                        radius: props.radius
                            ? (_b = (_a = props.radius.get(item).value) === null || _a === void 0 ? void 0 : _a.toNumber()) !== null && _b !== void 0 ? _b : getDefaultRadius()
                            : getDefaultRadius(),
                        defaultColor: props.defaultColor && props.defaultColor.get(item)
                            ? (_c = props.defaultColor.get(item).value) !== null && _c !== void 0 ? _c : "#264ae5"
                            : "#264ae5",
                        activeColor: props.activeColor && props.activeColor.get(item)
                            ? (_d = props.activeColor.get(item).value) !== null && _d !== void 0 ? _d : "#3cb33d"
                            : "#3cb33d",
                        strokeOpacity: props.strokeOpacity && props.strokeOpacity.get(item) ? props.strokeOpacity.get(item) : 1.0,
                        strokeWeight: props.strokeWeight && props.strokeWeight.get(item) ? props.strokeWeight.get(item) : 3,
                        fillOpacity: props.fillOpacity && props.fillOpacity.get(item) ? props.fillOpacity.get(item) : 1.0
                    };
                }
                else {
                    return undefined;
                }
            })
                .filter(it => !!it);
            if (isDifferentData(data, dataRef.current)) {
                dataRef.current = data;
                dispatch(updateGeofence([...data]));
            }
        };
        const onGeofence = (id, metadata) => {
            if (actionIn.current) {
                if (actionIn.current.canExecute) {
                    if (canSetAttributeValue(actionInID.current) && canSetAttributeValue(actionInDistance.current)) {
                        actionInID.current.setValue(id);
                        actionInDistance.current.setValue(new Big__default["default"](metadata.toFixed(2)));
                        actionIn.current.execute();
                    }
                    else {
                        console.warn("Cannot set Geofence ID and Geofence distance attribute");
                    }
                }
                else {
                    console.warn("Cannot execute Geofence IN event");
                }
            }
        };
        const onGeofenceOut = (id) => {
            if (actionOut.current) {
                if (actionOut.current.canExecute) {
                    if (canSetAttributeValue(actionOutID.current)) {
                        actionOutID.current.setValue(id);
                        actionOut.current.execute();
                    }
                    else {
                        console.warn("Cannot set Geofence Out ID attribute");
                    }
                }
                else {
                    console.warn("Cannot execute Geofence OUT event");
                }
            }
        };
        const onGeofencePosition = (lat, long) => {
            if (props.onGeofenceCurrentPositionAction &&
                props.onGeofenceCurrentPositionLatitude &&
                props.onGeofenceCurrentPositionLongitude) {
                props.onGeofenceCurrentPositionLatitude.setValue(lat);
                props.onGeofenceCurrentPositionLongitude.setValue(long);
                props.onGeofenceCurrentPositionAction.execute();
            }
        };
        React.useEffect(() => {
            if (state.mapReady && props.data.items) {
                loadGeofence(props.data.items);
            }
        }, [props.data.items, state.mapReady]);
        React.useEffect(() => {
            var _a, _b, _c, _d;
            dispatch(updateGeofenceOptions({
                enabled: (_a = props.geofenceEnabled.value) !== null && _a !== void 0 ? _a : true,
                setView: (_b = props.geofenceSetViewEnabled.value) !== null && _b !== void 0 ? _b : true,
                maximumAge: (_d = (_c = props.maximumAge.value) === null || _c === void 0 ? void 0 : _c.toNumber()) !== null && _d !== void 0 ? _d : 0
            }));
        }, [props.maximumAge.value, props.geofenceEnabled.value, props.geofenceSetViewEnabled.value]);
        React.useEffect(() => {
            actionIn.current = props.onGeofenceAction;
            actionInID.current = props.onGeofenceId;
            actionInDistance.current = props.onGeofenceDistance;
            actionOut.current = props.onGeofenceOutAction;
            actionOutID.current = props.onGeofenceOutId;
            if (props.onGeofenceAction &&
                props.onGeofenceId &&
                props.onGeofenceAction.canExecute &&
                !state.geofenceAction) {
                dispatch(updateGeofenceAction(onGeofence));
            }
            if (props.onGeofenceOutAction &&
                props.onGeofenceOutId &&
                props.onGeofenceOutAction.canExecute &&
                !state.geofenceOutAction) {
                dispatch(updateGeofenceOutAction(onGeofenceOut));
            }
            if (props.onGeofenceCurrentPositionAction &&
                props.onGeofenceCurrentPositionLatitude &&
                props.onGeofenceCurrentPositionLongitude &&
                props.onGeofenceCurrentPositionAction.canExecute &&
                !state.geofencePositionAction) {
                dispatch(updateGeofencePositionAction(onGeofencePosition));
            }
        }, [
            props.onGeofenceAction,
            props.onGeofenceId,
            props.onGeofenceOutAction,
            props.onGeofenceOutId,
            props.onGeofenceCurrentPositionAction,
            props.onGeofenceCurrentPositionLatitude,
            props.onGeofenceCurrentPositionLongitude
        ]);
        return React.createElement(React__default["default"].Fragment, null);
    }

    exports.SLLeafletGeofence = SLLeafletGeofence;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
